######################################################################
# Author: Taylor Johnson, Sandy Enriquez Vazquez
# Username: johnsont7, enriquezvazquezs
#
# Assignment: T11: The Legend of Tuna: Breath of Catnip
#
# Purpose: Learn about classes, inheritance, and Pygame
######################################################################
# Acknowledgements:
#
# Inspired by Zelda, rebuilt into Python by: https://github.com/clear-code-projects/Zelda
# Art generated by Stable Diffusion: https://stablediffusionweb.com/app/image-generator
# Borrowed some ideas from: https://realpython.com/pygame-a-primer/

# licensed under a Creative Commons
# Attribution-Noncommercial-Share Alike 3.0 United States License.
####################################################################################

import pygame
from NPC import NPC
from player import Player
import Mouse_NPC
import Enemy_NPC
import Maze




class Game:
    def __init__(self):
        """
        Game class for handling the game logic.
        """
        self.size = 800, 600
        self.running = True
        pygame.init()
        self.screen = pygame.display.set_mode(self.size)
        self.screen.fill('#9CBEBA')
        self.clock = pygame.time.Clock()
        self.tuna = Player(self.size)
        self.tacocat = Enemy_NPC.Enemy_NPC(self.size, position = [575, 510])
        matrix = [
            [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False,
             False],
            [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False,
             False],
            [False, False, True, False, False, True, True, True, True, True, True, False, False, True, False, False],
            [False, False, True, False, False, True, False, False, False, False, False, False, False, True, False,
             False],
            [False, False, True, False, False, True, False, False, False, False, False, False, False, True, False,
             False],
            [False, False, True, False, False, False, False, False, True, True, True, False, False, True, False, False],
            [False, False, True, False, False, False, False, False, True, True, True, False, False, True, False, False],
            [True, True, True, False, False, True, False, False, False, False, False, False, False, True, True, True],
            [False, False, True, False, False, True, False, False, False, False, False, False, False, True, False,
             False],
            [False, False, True, False, False, True, True, True, True, True, True, False, False, True, False, False],
            [False, False, False, False, False, True, False, False, False, False, False, False, False, False, False,
             False],
            [False, False, False, False, False, True, False, False, False, False, False, False, False, False, False,
             False]]
        self.maze = Maze.Maze(matrix)
        #
        # path_points = [(100, 100), (700, 100), (700, 500), (100, 500)]
        # self.enemy = Enemy_NPC(self.size, path_points)


    def run(self):
        """
        Runs the game forever

        :return: None
        """
        self.maze.makeBoundaries()
        while self.running:
            # Handle game ending first
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
            self.screen.fill('#9CBEBA')

            # keys = pygame.key.get_pressed()
            # self.tuna.movement(keys)
            # self.tacocat.movement([self.tuna])
            #
            # # Get the player position for enemy detection
            # player_pos = self.tuna.rect.center
            # self.enemy.update(player_pos)  # Update enemy behavior
            #
            # # Draw everything
            # self.screen.blit(self.tuna.surf, self.tuna.rect)
            # self.screen.blit(self.tacocat.surf, self.tacocat.rect)
            # self.screen.blit(self.enemy.surf, self.enemy.rect)

            # Handle user and game events next
            if pygame.sprite.spritecollide(self.tuna, [self.tacocat], False):
                # Collision! Prints the game ending text to the screen.
                font = pygame.font.SysFont("ComicSans", 36)
                txt = font.render('Taco, you caught me!!', True, "darkblue")
                self.screen.blit(txt, (self.size[0]//2, self.size[1]-100))
            else:

                playerPosition = [self.tuna.rect.x, self.tuna.rect.y]

                # Keep playing!
                self.tuna.movement(pygame.key.get_pressed())
                #self.tacocat.movement([self.tuna])
                self.screen.fill('#9CBEBA')

                self.checkBarrierCollision(self.tuna)

                # Draw Everything
                self.screen.blit(self.tuna.surf, self.tuna.rect)
                self.screen.blit(self.tacocat.surf, self.tacocat.rect)
                self.maze.drawMaze(self.screen)
            pygame.display.update()
            self.clock.tick(24)

        pygame.quit()

    def checkBarrierCollision(self, sprite):
        """
        Doesn't allow sprites to pass throw barriers
        :param sprite: sprite to check
        :return: none
        """
        for boundary in self.maze.boundaries:
            if pygame.sprite.spritecollide(sprite, [boundary], False):
                #sprite.rect.move_ip(previousPosition[0] - sprite.rect.x, previousPosition[1] - sprite.rect.y)
                if sprite.rect.right - boundary.rect.left > 0 and sprite.rect.left - boundary.rect.right < -5:
                    sprite.rect.move_ip(-sprite.move_distance, 0)
                elif sprite.rect.left < boundary.rect.right:
                    sprite.rect.move_ip(sprite.move_distance, 0)
                # if sprite.rect.bottom - boundary.rect.top > 0 and sprite.rect.bottom - boundary.rect.top < -5:
                #     sprite.rect.move_ip(0, sprite.move_distance)
                # elif sprite.rect.top < boundary.rect.bottom:
                #     sprite.rect.move_ip(0, -sprite.move_distance)


def main():
    """
    Starts the cat game.

    :return: None
    """
    game = Game()
    game.run()

if __name__ == "__main__":
    main()
