######################################################################
# Author: Taylor Johnson, Sandy Enriquez Vazquez
# Username: johnsont7, enriquezvazquezs
#
# Assignment: T11: The Legend of Tuna: Breath of Catnip
#
# Purpose: Learn about classes, inheritance, and Pygame
######################################################################
# Acknowledgements:
#
# Inspired by Zelda, rebuilt into Python by: https://github.com/clear-code-projects/Zelda
# Art generated by Stable Diffusion: https://stablediffusionweb.com/app/image-generator
# Borrowed some ideas from: https://realpython.com/pygame-a-primer/

# licensed under a Creative Commons
# Attribution-Noncommercial-Share Alike 3.0 United States License.
####################################################################################

import pygame
from NPC import NPC
from player import Player
import Mouse_NPC
import Enemy_NPC
import Maze




class Game:
    def __init__(self):
        """
        Game class for handling the game logic.
        """
        self.size = 800, 600
        self.running = True
        pygame.init()
        self.screen = pygame.display.set_mode(self.size)
        self.screen.fill('#9CBEBA')
        self.clock = pygame.time.Clock()
        self.tuna = Player(self.size, [25, 425])
        self.tacocat = Enemy_NPC.Enemy_NPC(self.size, "images/tacocat.png", position = [725, 510])
        self.tacocat.direction = 2
        self.whiskers = Enemy_NPC.Enemy_NPC(self.size, "images/whiskers.png", position = [25, 25])
        self.mouse = Mouse_NPC.Mouse(self.size, "images/mouse.png", position = [325, 200])


        matrix = [
            [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False,
             False],
            [False, False, False, False, False, False, False, True, False, False, False, False, False, False, False,
             False],
            [False, False, True, False, False, True, True, True, True, True, True, False, False, True, False, False],
            [False, False, True, False, False, True, False, False, False, False, False, False, False, True, False,
             False],
            [False, False, True, False, False, True, False, False, False, False, False, False, False, True, False,
             False],
            [False, False, True, False, False, False, False, False, True, True, True, False, False, True, False, False],
            [False, False, True, False, False, False, False, False, True, True, True, False, False, True, False, False],
            [True, True, True, False, False, True, False, False, False, False, False, False, False, True, True, True],
            [False, False, True, False, False, True, False, False, False, False, False, False, False, True, False,
             False],
            [False, False, True, False, False, True, True, True, True, True, True, False, False, True, False, False],
            [False, False, False, False, False, True, False, False, False, False, False, False, False, False, False,
             False],
            [False, False, False, False, False, True, False, False, False, False, False, False, False, False, False,
             False]]
        self.maze = Maze.Maze(matrix)
        #
        # path_points = [(100, 100), (700, 100), (700, 500), (100, 500)]
        # self.enemy = Enemy_NPC(self.size, path_points)


    def run(self):
        """
        Runs the game forever

        :return: None
        """
        self.maze.makeBoundaries()
        while self.running:
            # Handle game ending first
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
            self.screen.fill('#9CBEBA')

            # Handle user and game events next
            if pygame.sprite.spritecollide(self.tuna, [self.mouse], False):
                # Collision! Prints the game ending text to the screen.
                font = pygame.font.SysFont("ComicSans", 36)
                txt = font.render('You Win!', True, "darkblue")
                self.screen.blit(txt, (self.size[0]//4, self.size[1]-100))
            elif pygame.sprite.spritecollide(self.tacocat, [self.mouse], False):
                # Collision! Prints the game ending text to the screen.
                font = pygame.font.SysFont("ComicSans", 36)
                txt = font.render('Taco Cat Wins! You Lose', True, "darkblue")
                self.screen.blit(txt, (self.size[0] // 4, self.size[1] - 100))
            elif pygame.sprite.spritecollide(self.whiskers, [self.mouse], False):
                # Collision! Prints the game ending text to the screen.
                font = pygame.font.SysFont("ComicSans", 36)
                txt = font.render('Whiskers Wins! You Lose', True, "darkblue")
                self.screen.blit(txt, (self.size[0] // 4, self.size[1] - 100))
            else:

                #playerPosition = [self.tuna.rect.x, self.tuna.rect.y]

                # Keep playing!
                self.tuna.movement(pygame.key.get_pressed())
                self.tacocat.pathway1()
                self.whiskers.pathway2()


                self.screen.fill('#9CBEBA')
                for sprite in [self.tuna, self.tacocat, self.mouse, self.whiskers]:
                    self.checkBarrierCollision(sprite)
                    self.keepOnScreen(sprite)
                self.mouse.moveAwayFromOther(self.mouse.get_closest_cat_position([self.tuna, self.tacocat, self.whiskers]))

                # Draw Everything
                for sprite in [self.tuna, self.tacocat, self.mouse, self.whiskers]:
                    self.screen.blit(sprite.surf, sprite.rect)
                self.maze.drawMaze(self.screen)
            pygame.display.update()
            self.clock.tick(24)

        pygame.quit()

    def checkBarrierCollision(self, sprite):
        """
        Doesn't allow sprites to pass throw barriers
        :param sprite: sprite to check
        :return: none
        """
        for boundary in self.maze.boundaries:
            if pygame.sprite.spritecollide(sprite, [boundary], False):
                if 0 < sprite.rect.right - boundary.rect.left and sprite.rect.right - boundary.rect.left < 7:
                    sprite.rect.move_ip(-sprite.move_distance, 0)
                elif sprite.rect.left - boundary.rect.right < 0 and sprite.rect.left - boundary.rect.right > -7:
                    sprite.rect.move_ip(sprite.move_distance, 0)
                elif sprite.rect.top - boundary.rect.bottom < 0 and sprite.rect.top - boundary.rect.bottom > -7:
                    sprite.rect.move_ip(0, sprite.move_distance)
                elif sprite.rect.bottom - boundary.rect.top > 0 and sprite.rect.bottom - boundary.rect.top < 7:
                    sprite.rect.move_ip(0, -sprite.move_distance)

    def keepOnScreen(self, sprite):
        if sprite.rect.top < 0:
            sprite.rect.move_ip(0, sprite.move_distance)
        if sprite.rect.bottom > self.size[1]:
            sprite.rect.move_ip(0, -sprite.move_distance)
        if sprite.rect.left < 0:
            sprite.rect.move_ip(sprite.move_distance, 0)
        if sprite.rect.right > self.size[0]:
            sprite.rect.move_ip(-sprite.move_distance, 0)


def main():
    """
    Starts the cat game.

    :return: None
    """
    game = Game()
    game.run()

if __name__ == "__main__":
    main()
